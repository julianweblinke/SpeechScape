name: Build and Release wav2scape

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            env_file: environmentWINDOWS.yml
          - os: macos-latest
            env_file: environmentMACOS.yml
          - os: ubuntu-latest
            env_file: environmentLINUX.yml

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        activate-environment: wav2scape
        environment-file: ${{ matrix.env_file }}
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda info
        conda list
    
    - name: Set executable name and extension
      id: set-exe
      shell: bash -l {0}
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "EXE_NAME=wav2scape.exe" >> $GITHUB_OUTPUT
          echo "EXE_EXT=.exe" >> $GITHUB_OUTPUT
        else
          echo "EXE_NAME=wav2scape" >> $GITHUB_OUTPUT
          echo "EXE_EXT=" >> $GITHUB_OUTPUT
        fi
    
    # Install UPX for compression on Linux
    - name: Install UPX (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
        pyinstaller --clean --onefile \
          --name wav2scape \
          --paths=./src \
          --hidden-import=controller \
          --hidden-import=filehandler \
          --hidden-import=gui \
          --hidden-import=ml \
          --hidden-import=utils \
          --hidden-import=scipy \
          --hidden-import=scipy._cyutility \
          --hidden-import=scipy.sparse._csparsetools \
          --hidden-import=scipy.sparse._sparsetools \
          src/main.py
    
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: |
        pyinstaller --clean --onefile \
          --name wav2scape \
          --paths=./src \
          --hidden-import=controller \
          --hidden-import=filehandler \
          --hidden-import=gui \
          --hidden-import=ml \
          --hidden-import=utils \
          --hidden-import=scipy \
          --hidden-import=scipy._cyutility \
          --hidden-import=scipy.sparse._csparsetools \
          --hidden-import=scipy.sparse._sparsetools \
          src/main.py
        # Compress the Linux binary with UPX to reduce size
        upx --best --lzma dist/wav2scape || echo "UPX compression failed, proceeding with uncompressed binary"
    
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
        pyinstaller --clean --onefile \
          --name wav2scape \
          --paths=./src \
          --hidden-import=controller \
          --hidden-import=filehandler \
          --hidden-import=gui \
          --hidden-import=ml \
          --hidden-import=utils \
          --hidden-import=scipy \
          --hidden-import=scipy._cyutility \
          --hidden-import=scipy.sparse._csparsetools \
          --hidden-import=scipy.sparse._sparsetools \
          src/main.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wav2scape-${{ matrix.os }}
        path: dist/${{ steps.set-exe.outputs.EXE_NAME }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Package artifacts for release
      run: |
        mkdir -p release
        # Package Windows executable
        if [ -d "artifacts/wav2scape-windows-latest" ]; then
          cd artifacts/wav2scape-windows-latest
          zip ../../release/wav2scape-windows.zip wav2scape.exe
          cd ../..
        fi
        # Package macOS executable
        if [ -d "artifacts/wav2scape-macos-latest" ]; then
          cd artifacts/wav2scape-macos-latest
          tar -czvf ../../release/wav2scape-macos.tar.gz wav2scape
          cd ../..
        fi
        # Package Linux executable with size check and splitting if needed
        if [ -d "artifacts/wav2scape-ubuntu-latest" ]; then
          cd artifacts/wav2scape-ubuntu-latest
          # Check file size (in bytes) - GitHub limit is 2GB = 2147483648 bytes
          file_size=$(stat -f%z wav2scape 2>/dev/null || stat -c%s wav2scape 2>/dev/null || echo 0)
          if [ "$file_size" -gt 2000000000 ]; then
            echo "Linux binary is too large ($file_size bytes), splitting into parts..."
            # Split into 1.8GB chunks to stay under 2GB limit per file
            split -b 1800000000 wav2scape wav2scape.part.
            # Create a reassembly script
            cat > reassemble.sh << 'EOL'
        #!/bin/bash
        echo "Reassembling wav2scape binary..."
        cat wav2scape.part.* > wav2scape
        chmod +x wav2scape
        echo "Binary reassembled successfully. Run './wav2scape' to start the application."
        EOL
            chmod +x reassemble.sh
            # Remove the original large binary to avoid upload issues
            rm wav2scape
            # Create separate tar files for each part to stay under 2GB limit
            part_num=1
            for part in wav2scape.part.*; do
              tar -cf "../../release/wav2scape-linux-part${part_num}.tar" "$part"
              part_num=$((part_num + 1))
            done
            # Copy the reassembly script directly (no need for tar)
            cp reassemble.sh ../../release/wav2scape-linux-reassemble.sh
          else
            echo "Linux binary size is acceptable ($file_size bytes), packaging normally..."
            tar -czvf ../../release/wav2scape-linux.tar.gz wav2scape
          fi
          cd ../..
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}